Parameters:
  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  KMSKeyId:
    Type: String
    Default: 632698fc-2d48-48ca-b781-7cf2ca114dfd

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: decrypt
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:ReEncrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyId}
              - Effect: Allow
                Action:
                  - ssm:DescribeAssociation
                  - ssm:GetDeployablePatchSnapshotForInstance
                  - ssm:GetDocument
                  - ssm:DescribeDocument
                  - ssm:GetManifest
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                Resource:
                  - "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: vpc-849531e0
      GroupDescription: wireguard
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0

  # EBSVolume:
  #
  # EBSVolumeAttachment:

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.nano
        KeyName: boston
        ImageId: !Ref AMI
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SecurityGroup
        NetworkInterfaces:
          - AssociatePublicIpAddress: True
            DeleteOnTermination: True
            SubnetId: subnet-9b2938c2
            DeviceIndex: 0
            Groups:
              - !Ref SecurityGroup


        UserData:
          Fn::Base64: |
            #!/bin/sh
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            docker info
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
        # BlockDeviceMappings:
        #   - DeviceName: /dev/sdh
        #     Ebs:
        #       DeleteOnTermination: True
        #       Encrypted: True
        #       KmsKeyId: !Ref KMSKeyId
        #       VolumeSize: 20
        #       VolumeType: gp2

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvinit:
            cfn-hup:
              enabled: true
              ensureRunning: true
              files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        config:
          files:
            "/home/ec2-user/docker-compose.yml":
              mode: 000644
              owner: ec2-user
              group: ec2-user
              content:
                Fn::Sub: |
                  ---
                  version: "2.1"
                  services:
                  wireguard:
                    image: linuxserver/wireguard
                    container_name: wireguard
                    cap_add:
                      - NET_ADMIN
                      - SYS_MODULE
                    environment:
                      - PUID=1000
                      - PGID=1000
                      - TZ=Europe/London
                      - SERVERURL=vpn.kloudcover.com #optional
                      - SERVERPORT=51820 #optional
                      - PEERS=1 #optional
                      - PEERDNS=auto #optional
                      # - INTERNAL_SUBNET=10.13.13.0 #optional
                    volumes:
                      - /home/ec2-user/config:/config
                      - /lib/modules:/lib/modules
                    ports:
                      - 51820:51820/udp
                    sysctls:
                      - net.ipv4.conf.all.src_valid_mark=1
                    restart: unless-stopped
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ASG.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASG --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
    Properties:
      AvailabilityZones:
        - us-west-2a
        - us-west-2b
        - us-west-2c
      VPCZoneIdentifier:
        - subnet-bc3193d8
        - subnet-ed43849b
        - subnet-9b2938c2
      MinSize: 1
      MaxSize: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
