Parameters:
  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  KMSKeyId:
    Type: String
    Default: 632698fc-2d48-48ca-b781-7cf2ca114dfd

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: decrypt
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:ReEncrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyId}
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                Resource:
                  - arn:aws:route53:::hostedzone/Z1IJC8V5Z715J8

              - Effect: Allow
                Action:
                  - ssm:DescribeAssociation
                  - ssm:GetDeployablePatchSnapshotForInstance
                  - ssm:GetDocument
                  - ssm:DescribeDocument
                  - ssm:GetManifest
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                  - ec2:ModifyInstanceAttribute
                  - route53:ListHostedZones
                Resource:
                  - "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMRole
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: vpc-849531e0
      GroupDescription: wireguard
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 51820
          ToPort: 51820
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.nano
        KeyName: boston
        ImageId: !Ref AMI
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - AssociatePublicIpAddress: True
            DeleteOnTermination: True
            # SubnetId: subnet-9b2938c2
            DeviceIndex: 0
            Groups:
              - !Ref SecurityGroup


        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              yum update -y
              yum install -y amazon-efs-utils
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASG --region ${AWS::Region}
              export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin"

              amazon-linux-extras install docker
              service docker start
              usermod -a -G docker ec2-user
              docker info
              # curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              # chmod +x /usr/local/bin/docker-compose
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASG --region ${AWS::Region}

              set -euxo pipefail;
              trap "/opt/aws/bin/cfn-signal --success false --region ${AWS::Region} --stack ${AWS::StackName} --resource ASG;" ERR;
              curl -Lo /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo
              yum clean all
              yum install wireguard-dkms iptables-services -y
              until /sbin/modprobe wireguard
              do
                dmesg | grep wireguard;
              done;

              # source/dest check
              INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id);
              aws ec2 --region ${AWS::Region} modify-instance-attribute --instance-id $INSTANCE_ID --no-source-dest-check;

              # iptables
              /bin/systemctl enable iptables;
              /bin/systemctl restart iptables;
              /bin/systemctl status iptables;
              /sbin/iptables -F;
              /sbin/iptables-save > /etc/sysconfig/iptables;
              /sbin/iptables -L;
              # IP Forwarding
              echo "
              net.ipv4.conf.all.forwarding = 1
              net.ipv6.conf.all.forwarding = 1
              " > /etc/sysctl.d/wg.conf;
              /sbin/sysctl --system;
              systemctl enable wg-quick@wg0.service;


              # Load modules.
              modprobe wireguard
              modprobe iptable_nat
              modprobe ip6table_nat

              # Enable modules when rebooting.
              echo "wireguard" > /etc/modules-load.d/wireguard.conf
              echo "iptable_nat" > /etc/modules-load.d/iptable_nat.conf
              echo "ip6table_nat" > /etc/modules-load.d/ip6table_nat.conf

              # mount efs
              mkdir -p /home/ec2-user/config
              echo "fs-8c37c325:/ /home/ec2-user/config efs tls,_netdev" >> /etc/fstab
              sleep 5
              mount -t efs -o tls fs-8c37c325:/ /home/ec2-user/config

              docker run -d \
                --restart=always \
                -e DOMAIN_NAME='vpn.kloudcover.com' \
                -e HOSTED_ZONE='kloudcover.com' \
                ktruckenmiller/aws-docker-dynamic-dns

              # wait for dns to come online
              sleep 300
              # run subspac e
              docker run -d \
                  --name subspace \
                  --restart always \
                  --network host \
                  --cap-add NET_ADMIN \
                  --volume /home/ec2-user/config:/data \
                  -e SUBSPACE_LETSENCRYPT="true" \
                  -e SUBSPACE_HTTP_HOST=vpn.kloudcover.com \
                  -e SUBSPACE_HTTP_INSECURE="false" \
                  -e SUBSPACE_LISTENPORT="51820" \
                  -e SUBSPACE_IPV6_NAT_ENABLED=1 \
                  ktruckenmiller/subspace:latest
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ASG;


  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvinit:
            cfn-hup:
              enabled: true
              ensureRunning: true
              files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        config:
          files:
            "/etc/wireguard/wg0.conf":
              mode: "000600"
              owner: "root"
              group: "root"
              content:
                Fn::Sub: |
                  [Interface]
                  Address = 172.16.1.1/32
                  DNS = 1.1.1.1
                  ListenPort = 51820
                  PrivateKey = PRIVATEKEY
                  SaveConfig = true
                  PostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
                  PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

                  [Peer]
                  PublicKey = PEERPUBLIC
                  Endpoint = vpn.kloudcover.com:51820
                  AllowedIPs = 0.0.0.0/0


            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ASG.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASG --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
    Properties:
      AvailabilityZones:
        - us-west-2a
        - us-west-2b
        - us-west-2c
      VPCZoneIdentifier:
        - subnet-bc3193d8
        - subnet-ed43849b
        - subnet-9b2938c2
      MinSize: 1
      MaxSize: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT15M
        SuspendProcesses:
          - ScheduledActions
          - AZRebalance
          - ReplaceUnhealthy
        WaitOnResourceSignals: true
